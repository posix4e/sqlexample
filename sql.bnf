/* SQL Parser - BNF Specification */
/* Covers common SQL DML and DDL statements */

<program>           ::= <statement_list>

<statement_list>    ::= <statement> (";" <statement>)* ";"?

<statement>         ::= <select_stmt>
                      | <insert_stmt>
                      | <update_stmt>
                      | <delete_stmt>
                      | <create_table_stmt>
                      | <drop_table_stmt>
                      | <alter_table_stmt>

/* SELECT Statement */
<select_stmt>       ::= "SELECT" <select_list>
                        "FROM" <table_references>
                        <where_clause>?
                        <group_by_clause>?
                        <having_clause>?
                        <order_by_clause>?
                        <limit_clause>?

<select_list>       ::= "*"
                      | <select_item> ("," <select_item>)*

<select_item>       ::= <expression> ("AS" <identifier>)?

<table_references>  ::= <table_reference> ("," <table_reference>)*

<table_reference>   ::= <table_name> (<alias_clause>)?
                      | <join_clause>

<alias_clause>      ::= ("AS")? <identifier>

<join_clause>       ::= <table_reference> <join_type> "JOIN" <table_reference> "ON" <expression>

<join_type>         ::= "INNER" | "LEFT" | "RIGHT" | "FULL" | "CROSS" | ""

<where_clause>      ::= "WHERE" <expression>

<group_by_clause>   ::= "GROUP" "BY" <expression_list>

<having_clause>     ::= "HAVING" <expression>

<order_by_clause>   ::= "ORDER" "BY" <order_item> ("," <order_item>)*

<order_item>        ::= <expression> ("ASC" | "DESC")?

<limit_clause>      ::= "LIMIT" <number> ("OFFSET" <number>)?

/* INSERT Statement */
<insert_stmt>       ::= "INSERT" "INTO" <table_name>
                        ("(" <column_list> ")")?
                        <insert_source>

<insert_source>     ::= "VALUES" <value_list> ("," <value_list>)*
                      | <select_stmt>

<column_list>       ::= <identifier> ("," <identifier>)*

<value_list>        ::= "(" <expression_list> ")"

/* UPDATE Statement */
<update_stmt>       ::= "UPDATE" <table_name>
                        "SET" <assignment_list>
                        <where_clause>?

<assignment_list>   ::= <assignment> ("," <assignment>)*

<assignment>        ::= <identifier> "=" <expression>

/* DELETE Statement */
<delete_stmt>       ::= "DELETE" "FROM" <table_name> <where_clause>?

/* CREATE TABLE Statement */
<create_table_stmt> ::= "CREATE" "TABLE" ("IF" "NOT" "EXISTS")? <table_name>
                        "(" <column_def_list> ")"

<column_def_list>   ::= <column_def> ("," <column_def>)*

<column_def>        ::= <identifier> <data_type> <column_constraint>*

<data_type>         ::= "INT" | "INTEGER" | "BIGINT" | "SMALLINT"
                      | "VARCHAR" "(" <number> ")"
                      | "CHAR" "(" <number> ")"
                      | "TEXT"
                      | "DECIMAL" "(" <number> ("," <number>)? ")"
                      | "FLOAT" | "DOUBLE" | "REAL"
                      | "DATE" | "TIME" | "TIMESTAMP" | "DATETIME"
                      | "BOOLEAN" | "BOOL"
                      | "BLOB"

<column_constraint> ::= "PRIMARY" "KEY"
                      | "NOT" "NULL"
                      | "NULL"
                      | "UNIQUE"
                      | "AUTO_INCREMENT"
                      | "DEFAULT" <literal>
                      | "CHECK" "(" <expression> ")"
                      | "REFERENCES" <table_name> "(" <identifier> ")"

/* DROP TABLE Statement */
<drop_table_stmt>   ::= "DROP" "TABLE" ("IF" "EXISTS")? <table_name>

/* ALTER TABLE Statement */
<alter_table_stmt>  ::= "ALTER" "TABLE" <table_name> <alter_action>

<alter_action>      ::= "ADD" "COLUMN" <column_def>
                      | "DROP" "COLUMN" <identifier>
                      | "MODIFY" "COLUMN" <column_def>
                      | "RENAME" "TO" <table_name>

/* Expressions */
<expression>        ::= <or_expr>

<or_expr>           ::= <and_expr> ("OR" <and_expr>)*

<and_expr>          ::= <not_expr> ("AND" <not_expr>)*

<not_expr>          ::= "NOT" <not_expr>
                      | <comparison_expr>

<comparison_expr>   ::= <additive_expr> (<comparison_op> <additive_expr>)?
                      | <additive_expr> "BETWEEN" <additive_expr> "AND" <additive_expr>
                      | <additive_expr> "IN" "(" <expression_list> ")"
                      | <additive_expr> "LIKE" <additive_expr>
                      | <additive_expr> "IS" ("NOT")? "NULL"

<comparison_op>     ::= "=" | "!=" | "<>" | "<" | ">" | "<=" | ">="

<additive_expr>     ::= <multiplicative_expr> (("+" | "-") <multiplicative_expr>)*

<multiplicative_expr> ::= <unary_expr> (("*" | "/" | "%") <unary_expr>)*

<unary_expr>        ::= ("+" | "-") <unary_expr>
                      | <primary_expr>

<primary_expr>      ::= <literal>
                      | <identifier>
                      | <column_ref>
                      | <function_call>
                      | "(" <expression> ")"
                      | "(" <select_stmt> ")"

<column_ref>        ::= <identifier> "." <identifier>
                      | <identifier> "." <identifier> "." <identifier>

<function_call>     ::= <identifier> "(" (<expression_list> | "*")? ")"

<expression_list>   ::= <expression> ("," <expression>)*

/* Basic tokens */
<table_name>        ::= <identifier>

<identifier>        ::= [a-zA-Z_][a-zA-Z0-9_]*

<literal>           ::= <number>
                      | <string>
                      | "TRUE" | "FALSE"
                      | "NULL"

<number>            ::= [0-9]+ ("." [0-9]+)?

<string>            ::= "'" [^']* "'"
