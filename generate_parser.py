#!/usr/bin/env python3
"""
SQL Parser Generator

This script generates a SQL parser from the sql.lark grammar file.
The generated parser file (sql_parser.py) is read-only and should not be checked into the repo.
"""

import os
import sys
from pathlib import Path


def generate_parser_code(grammar):
    """Generate the Python parser code using the grammar."""

    parser_code = '''"""
SQL Parser - Auto-generated from sql.lark
DO NOT EDIT THIS FILE MANUALLY

This file is generated by generate_parser.py and should not be checked into version control.
It is marked as read-only to prevent accidental modifications.
"""

try:
    from lark import Lark, Tree, Token
except ImportError:
    print("Error: lark-parser is not installed.")
    print("Please install it with: pip install lark-parser")
    import sys
    sys.exit(1)


# Grammar definition
GRAMMAR = """
''' + grammar + '''
"""


class SQLParser:
    """
    SQL Parser class that wraps the Lark parser.

    Usage:
        parser = SQLParser()
        tree = parser.parse("SELECT * FROM users WHERE id = 1")
        print(tree.pretty())
    """

    def __init__(self):
        """Initialize the parser with the SQL grammar."""
        # Use Earley parser for more flexible grammar support
        self.parser = Lark(GRAMMAR, start='start', parser='earley')

    def parse(self, sql_text):
        """
        Parse SQL text and return the parse tree.

        Args:
            sql_text (str): SQL statement or statements to parse

        Returns:
            Tree: Lark parse tree

        Raises:
            Exception: If parsing fails
        """
        return self.parser.parse(sql_text)

    def parse_file(self, filepath):
        """
        Parse SQL from a file.

        Args:
            filepath (str): Path to SQL file

        Returns:
            Tree: Lark parse tree
        """
        with open(filepath, 'r') as f:
            sql_text = f.read()
        return self.parse(sql_text)


def main():
    """Parse SQL from stdin and output the AST."""
    import sys

    parser = SQLParser()

    # Read all input from stdin
    sql_input = sys.stdin.read().strip()

    if not sql_input:
        print("Error: No input provided", file=sys.stderr)
        print("Usage: echo 'SELECT * FROM users;' | python sql_parser.py", file=sys.stderr)
        print("   or: python sql_parser.py < query.sql", file=sys.stderr)
        sys.exit(1)

    try:
        # Parse the input
        tree = parser.parse(sql_input)

        # Output the AST in pretty format for inspection
        print("=" * 80)
        print("SQL Input:")
        print("=" * 80)
        print(sql_input)
        print()
        print("=" * 80)
        print("Parse Tree (AST):")
        print("=" * 80)
        print(tree.pretty())
        print()
        print("=" * 80)
        print("Parse successful ✓")
        print("=" * 80)

    except Exception as e:
        print("=" * 80, file=sys.stderr)
        print("Parse Error:", file=sys.stderr)
        print("=" * 80, file=sys.stderr)
        print(f"{e}", file=sys.stderr)
        print("=" * 80, file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
'''

    return parser_code


def make_readonly(filepath):
    """Make the file read-only."""
    os.chmod(filepath, 0o444)


def main():
    """Main function to generate the parser."""
    script_dir = Path(__file__).parent
    lark_file = script_dir / "sql.lark"
    output_file = script_dir / "sql_parser.py"

    print("SQL Parser Generator")
    print("=" * 60)

    # Check if Lark file exists
    if not lark_file.exists():
        print(f"Error: Lark grammar file not found at {lark_file}")
        sys.exit(1)

    print(f"Reading grammar from: {lark_file}")

    # Read Lark grammar file
    with open(lark_file, 'r') as f:
        lark_grammar = f.read()

    # Generate parser code
    print("Generating parser code...")
    parser_code = generate_parser_code(lark_grammar)

    # Remove old file if it exists (it might be read-only)
    if output_file.exists():
        print(f"Removing existing parser file...")
        os.chmod(output_file, 0o644)  # Make writable first
        output_file.unlink()

    # Write output file
    print(f"Writing parser to: {output_file}")
    with open(output_file, 'w') as f:
        f.write(parser_code)

    # Make it read-only
    print("Setting file as read-only...")
    make_readonly(output_file)

    print()
    print("✓ Parser generated successfully!")
    print(f"✓ Output file: {output_file}")
    print(f"✓ File is read-only and excluded from git")
    print()
    print("To use the parser:")
    print("  from sql_parser import SQLParser")
    print("  parser = SQLParser()")
    print("  tree = parser.parse('SELECT * FROM users;')")
    print()
    print("Note: You need to install lark-parser:")
    print("  pip install lark-parser")


if __name__ == "__main__":
    main()
